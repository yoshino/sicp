; fixed-pointの途中の近似値が見えるように修正

(define tolerance 0.00001)

(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2))
       tolerance))
  (define (try guess)
    (newline)
    (display guess)
    (let ((next (f guess)))
      (if (close-enough? guess next)
        next
        (try next))))
  (try first-guess))

(define (golden-ratio x)
  (+ 1 (/ 1 x)))

; 途中の近似値が見えるようになった。
;gosh> (fixed-point golden-ratio 0.1)
;0.1
;11.0
;1.0909090909090908
;1.9166666666666667
;1.5217391304347827
;1.657142857142857
;1.603448275862069
;1.6236559139784945
;1.6158940397350994
;1.6188524590163933
;1.617721518987342
;1.6181533646322377
;1.6179883945841393
;1.6180514046622831
;1.6180273365349096
;1.6180365296803654

; 問題の近似値を求める式はどのように導出されたか？
; x^x = 1000
; logx^x = log1000
; xlogx = log1000
; x = log1000 / logx

(define (log-approx n)
  (/ (log 1000) (log n)))


; gosh> (fixed-point log-approx 10)
;10
;2.9999999999999996
;6.2877098228681545
;3.7570797902002955
;5.218748919675316
;4.1807977460633134
;4.828902657081293
;4.386936895811029
;4.671722808746095
;4.481109436117821
;4.605567315585735
;4.522955348093164
;4.577201597629606
;4.541325786357399
;4.564940905198754
;4.549347961475409
;4.5596228442307565
;4.552843114094703
;4.55731263660315
;4.554364381825887
;4.556308401465587
;4.555026226620339
;4.55587174038325
;4.555314115211184
;4.555681847896976
;4.555439330395129
;4.555599264136406
;4.555493789937456
;4.555563347820309
;4.555517475527901
;4.555547727376273
;4.555527776815261
;4.555540933824255
;4.555532257016376

; 平均緩和方法を用いた場合
(define (average x y)
  (/ (+ x y) 2))

; (fixed-point (lambda (x) (average x (/ (log 1000) (log x)))) 10.0)
;10.0
;6.5
;5.095215099176933
;4.668760681281611
;4.57585730576714
;4.559030116711325
;4.55613168520593
;4.555637206157649
;4.55555298754564
;4.5555386477016174.555536206185039

; 明らかに平均緩和方法を用いた場合のほうが、ステップスは少なくなった。
